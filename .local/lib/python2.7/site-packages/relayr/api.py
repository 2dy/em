"""
Implementation of the relayr HTTP RESTful API as individual endpoints.

This module contains the API class with one method for each API endpoint.
All method names start with the HTTP method followed by the resource name
used in that endpoint e.g. ``post_user_app`` for the endpoint
``POST /users/<id>/apps/<id>`` with minor modifications.
"""

import os
import time
import json
import platform
import urllib
import warnings
import logging
import datetime

import requests

from relayr import config
from relayr.version import __version__
from relayr.compat import urlencode
from relayr.exceptions import RelayrApiException
from relayr.utils.decorators import deprecated


def create_logger(sender):
    """Create a logger for the requesting object."""

    logger = logging.getLogger('Relayr API Client')
    logger.setLevel(logging.DEBUG)

    logfile = "{0}/relayr-api-{1}.log".format(config.LOG_DIR, id(sender))
    h = logging.FileHandler(logfile)
    # h = logging.RotatingFileHandler(logfile,
    #     mode='a', maxBytes=2**14, backupCount=5, encoding=None, delay=0)

    # h.setLevel(logging.DEBUG)

    # create formatter and add it to the handler(s)
    fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    formatter = logging.Formatter(fmt, '%Y-%m-%d %H:%M:%S.%f %Z%z')
    formatter.converter = time.gmtime
    h.setFormatter(formatter)

    # add the handler(s) to the logger
    logger.addHandler(h)

    return logger

def build_curl_call(method, url, data=None, headers=None):
    """
    Build and return a ``curl`` command for use on the command-line.

    :param method: HTTP request method, ``GET``, ``POST``, etc.
    :type method: string
    :param url: Full HTTP path.
    :type url: string
    :param data: Data to be transmitted, usually *posted*.
    :type data: object serializable as JSON
    :param headers: Additional HTTP request headers.
    :type headers: dictionary
    :rtype: string

    Example:

    .. code-block:: python

        cmd = build_curl_call('POST', 'http://foo.com/bar', data={'x': 42},
                headers={'SUPER_SECRET_KEY': '123'})
        print(cmd)
        curl -X POST "http://foo.com/bar" -H "SUPER_SECRET_KEY: 123" --data "{\"x\": 42}"
    """
    command = 'curl -X {0} "{1}"'.format(method.upper(), url)
    if headers:
        for k, v in headers.items():
            command += ' -H "{0}: {1}"'.format(k, v)
    if data:
        jsdata = json.dumps(data)
        command += " --data {0}".format(json.dumps(jsdata))
    return command

class Api(object):
    """
    This class provides direct access to the relayr API endpoints.

    Examples:

    .. code-block:: python

        # Create an anonymous client and call simple API endpoints:
        from relayr.api import Api
        a = Api()
        assert a.get_server_status() == {'database': 'ok'}
        assert a.get_users_validate('god@in.heaven') == {'exists': False}
        assert a.get_public_device_model_meanings() > 0
    """

    def __init__(self, token=None):
        """
        Object construction.

        :param token: A token generated on the relayr platform for a combination of
            a relayr user and application.
        :type token: string
        """
        self.token = token
        self.host = config.relayrAPI
        self.history_host = config.relayrHistoryAPI
        self.useragent = config.userAgent
        self.headers = {
            'User-Agent': self.useragent,
            'Content-Type': 'application/json'
        }
        if self.token:
            self.headers['Authorization'] = 'Bearer {0}'.format(self.token)

        if config.LOG:
            self.logger = create_logger(self)
            self.logger.info('started')

        # check if the API is available
        try:
            self.get_server_status()
        except:
            raise

    def __del__(self):
        """Object destruction."""
        if config.LOG:
            self.logger.info('terminated')

    def perform_request(self, method, url, data=None, headers=None):
        """
        Perform an API call and return a JSON result as Python data structure.

        :param method: HTTP request method, ``GET``, ``POST``, etc.
        :type method: string
        :param url: Full HTTP path.
        :type url: string
        :param data: Data to be transmitted, usually *posted*.
        :type data: object serializable as JSON
        :param headers: Additional HTTP request headers.
        :type headers: dictionary
        :rtype: string

        Query parameters are expected in the ``url`` parameter.
        For returned status codes other than 2XX a ``RelayrApiException``
        is raised which contains the API call (method and URL) plus
        a ``curl`` command replicating the API call for debugging reuse
        on the command-line.
        """
        if config.LOG:
            command = build_curl_call(method, url, data, headers)
            self.logger.info("API request: " + command)

        json_data = None if method.lower() == 'get' else "null"
        if data is not None:
            json_data = json.dumps(data)
            try:
                json_data = json_data.encode('utf-8')
            except (UnicodeDecodeError, AttributeError):
                # bytes/str - no need to re-encode
                pass

        func = getattr(requests, method.lower())
        resp = func(url, data=json_data or '', headers=headers or {})
        resp.connection.close()

        if config.LOG:
            hd = dict(resp.headers.items())
            self.logger.info("API response headers: " + json.dumps(hd))
            self.logger.info("API response content: " + resp.content)

        status = resp.status_code
        if 200 <= status < 300:
            try:
                js = resp.json()
            except:
                js = None
                # raise ValueError('Invalid JSON code(?): %r' % resp.content)
                if config.DEBUG:
                    warnings.warn("Replaced suspicious API response (invalid JSON?) %r with 'null'!" % resp.content)
            return status, js
        else:
            args = (resp.json()['message'], method.upper(), url)
            msg = "{0} - {1} {2}".format(*args)
            command = build_curl_call(method, url, data, headers)
            msg = "%s - %s" % (msg, command)
            raise RelayrApiException(msg)


    # ..............................................................................
    # System
    # ..............................................................................

    def get_users_validate(self, userEmail):
        """
        Get a user email address validation.

        :param userEmail: The user email address to be validated.
        :type userEmail: string
        :rtype: A dict with an ``exists`` field and a Boolean result value.

        Sample result::

            {"exists": True}
        """
        # https://api.relayr.io/users/validate?email=<userEmail>
        url = '{0}/users/validate?email={1}'.format(self.host, userEmail)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def get_server_status(self):
        """
        Get server status.

        :rtype: A dict with certain fields describing the server status.

        Sample result::

            {"database": "ok"}
        """
        # https://api.relayr.io/server-status
        url = '{0}/server-status'.format(self.host)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def post_oauth2_token(self, clientID, clientSecret, code, redirectURI):
        """
        Generate and return an OAuth2 access token from supplied parameters.

        :param clientID: The client's UUID.
        :type clientID: string
        :param clientSecret: The OAuth client secret.
        :type clientSecret: string
        :param code: The OAuth authorization code (valid for five minutes).
        :type code: string
        :param redirectURI: The redirect URI.
        :type redirectURI: string
        :rtype: dict with two fields, "access_token" and "token_type" (with string values for both)
        """
        data = {
            "client_id": clientID,
            "client_secret": clientSecret,
            "grant_type": "authorization_code",
            "code": code,
            "redirect_uri": redirectURI
        }

        # https://api.relayr.io/oauth2/token
        url = '{0}/oauth2/token'.format(self.host)
        _, data = self.perform_request('POST', url, data=data, headers=self.headers)
        return data

    def get_oauth2_appdev_token(self, appID):
        """
        Get a token representing a specific relayr application and user.

        :param appID: The application's UUID.
        :type appID: string
        :rtype: A dict with fields describing the token.

        Sample result (anonymized token value)::

            {
                "token": "...",
                "expiryDate": "2014-10-08T10:14:07.789Z"
            }
        """
        # https://api.relayr.io/oauth2/appdev-token/<appID>
        url = '{0}/oauth2/appdev-token/{1}'.format(self.host, appID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def post_oauth2_appdev_token(self, appID):
        """
        Generate a new token representing a user and a relayr application.

        :param appID: The application's UUID.
        :type appID: string
        :rtype: A dict with fields describing the token.
        """
        # https://api.relayr.io/oauth2/appdev-token/<appID>
        url = '{0}/oauth2/appdev-token/{1}'.format(self.host, appID)
        _, data = self.perform_request('POST', url, headers=self.headers)
        return data

    def delete_oauth2_appdev_token(self, appID):
        """
        Revoke token for an application with given UUID.

        :param appID: The application's UUID.
        :type appID: string
        """
        # https://api.relayr.io/oauth2/appdev-token/<appID>
        url = '{0}/oauth2/appdev-token/{1}'.format(self.host, appID)
        _, data = self.perform_request('DELETE', url, headers=self.headers)
        return data

    # ..............................................................................
    # Users
    # ..............................................................................

    def get_oauth2_user_info(self):
        """
        Return information about the user initiating the request.

        :rtype: A dictionary with fields describing the user.

        Sample result (partly anonymized values)::

            {
                "email": "joe@foo.com",
                "id": "...",
                "name": "joefoo"
            }
        """
        # https://api.relayr.io/oauth2/user-info
        url = '{0}/oauth2/user-info'.format(self.host)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def patch_user(self, userID, name=None, email=None):
        """
        Update user's name or email attribute, or both.

        :param userID: the users's UUID
        :type userID: string
        :param name: the user name to be set
        :type name: string
        :param email: the user email to be set
        :type email: string
        :rtype: dict with user info fields
        """
        data = {}
        if name is not None:
            data.update(name=name)
        if email is not None:
            data.update(email=email)

        # https://api.relayr.io/users/%s
        url = '{0}/users/{1}'.format(self.host, userID)
        _, data = self.perform_request('PATCH', url, data=data, headers=self.headers)
        return data

    def post_user_app(self, userID, appID):
        """
        Install a new app for a specific user.

        :param userID: the users's UUID
        :type userID: string
        :param appID: The application's UUID.
        :type appID: string
        """
        # https://api.relayr.io/users/%s/apps/%s
        url = '{0}/users/{1}/apps/{2}'.format(self.host, userID, appID)
        _, data = self.perform_request('POST', url, headers=self.headers)
        return data

    def delete_user_app(self, userID, appID):
        """
        Uninstall an app of a user with the respective UUIDs.

        :param userID: the users's UUID
        :type userID: string
        :param appID: the app's UUID
        :type appID: string
        """
        # https://api.relayr.io/users/%s/apps/%s
        url = '{0}/users/{1}/apps/{2}'.format(self.host, userID, appID)
        _, data = self.perform_request('DELETE', url, headers=self.headers)
        return data

    def get_user_publishers(self, userID):
        """
        Get all publishers owned by a user with a specific UUID.

        :param userID: the users's UUID
        :type userID: string
        :rtype: list of dicts representing publishers
        """
        # https://api.relayr.io/users/%s/publishers
        url = '{0}/users/{1}/publishers'.format(self.host, userID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def get_user_apps(self, userID):
        """
        Get all apps installed for a user with a specific UUID.

        :param userID: the users's UUID
        :type userID: string
        :rtype: list of dicts ... with UUIDs and secrets
        """
        # https://api.relayr.io/users/%s/apps
        url = '{0}/users/{1}/apps'.format(self.host, userID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def get_user_transmitters(self, userID):
        """
        Get all transmitters for a user with a specific UUID.

        :param userID: the users's UUID
        :type userID: string
        :rtype: list of dicts with UUIDs and secrets
        """
        # https://api.relayr.io/users/%s/transmitters
        url = '{0}/users/{1}/transmitters'.format(self.host, userID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def get_user_devices(self, userID):
        """
        Get all devices registered for a user with a specific UUID.

        :param userID: the users's UUID
        :type userID: string
        :rtype: list of dicts ...
        """
        # https://api.relayr.io/users/%s/devices
        url = '{0}/users/{1}/devices'.format(self.host, userID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def get_user_devices_bookmarks(self, userID):
        """
        Get a list of devices bookmarked by a specific user.

        :param userID: the users's UUID
        :type userID: string
        :rtype: list of dicts, each representing a device

        Sample result (anonymized UUIDs)::

            [{u'firmwareVersion': u'1.0.0',
              u'id': '...',
              u'model': '...',
              u'name': 'My Wunderbar Microphone',
              u'owner': '...',
              u'public': True,
              u'secret': '238885'}]
        """
        # https://api.relayr.io/users/%s/devices/bookmarks
        url = '{0}/users/{1}/devices/bookmarks'.format(self.host, userID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def post_user_devices_bookmark(self, userID, deviceID):
        """
        Bookmark a specific public device for a specific user.

        :param userID: the users's UUID
        :type userID: string
        :param deviceID: the UUID of the device to be bookmarked
        :type deviceID: string
        :rtype: list of dicts ...

        Sample result (anonymized UUIDs)::

            {'createdAt': '2014-11-05T16:31:06.429Z',
             'deviceId': '...',
             'userId': '...'}
        """
        # https://api.relayr.io/users/%s/devices/bookmarks
        url = '{0}/users/{1}/devices/{2}/bookmarks'.format(self.host, userID, deviceID)
        _, data = self.perform_request('POST', url, headers=self.headers)
        return data

    def delete_user_devices_bookmark(self, userID, deviceID):
        """
        Delete a bookmark for a specific user and device.

        :param userID: the users's UUID
        :type userID: string
        :param deviceID: the device's UUID
        :type deviceID: string
        :rtype: None
        """
        # https://api.relayr.io/users/%s/devices/%s/bookmarks
        url = '{0}/users/{1}/devices/{2}/bookmarks'.format(self.host, userID, deviceID)
        _, data = self.perform_request('DELETE', url, headers=self.headers)
        return data

    def post_user_wunderbar(self, userID):
        """
        Get the UUIDs and secrets of the master module and sensor modules.

        :param userID: the users's UUID
        :type userID: string
        :rtype: dict with information about master and sensor modules/devices

        Sample result (abbreviated, some values anonymized)::

            {
                "bridge": { ... },
                "microphone": {
                    "name": "My Wunderbar Microphone",
                    "public": False,
                    "secret": "......",
                    "owner": "...",
                    "model": {
                        "readings": [
                            {
                                "meaning": "noise_level",
                                "unit": "dba"
                            }
                        ],
                        "manufacturer": "Relayr GmbH",
                        "id": "...",
                        "name": "Wunderbar Microphone"
                    },
                    "id": "...",
                    "firmwareVersion": "1.0.0"
                },
                "light": { ... },
                "masterModule": {
                    "owner": "...",
                    "secret": "............",
                    "id": "...",
                    "name": "My Wunderbar Master Module"
                },
                "infrared": { ... },
                "thermometer": { ... },
                "gyroscope": { ... }
            }
        """
        # https://api.relayr.io/users/%s/wunderbar
        url = '{0}/users/{1}/wunderbar'.format(self.host, userID)
        _, data = self.perform_request('POST', url, headers=self.headers)
        return data

    def delete_wunderbar(self, transmitterID):
        """
        Delete a WunderBar identified by its master module from the relayr
        cloud. This means that in addition to the transmitter (the master
        module) all devices (sensors) associated with it are being deleted.

        :param transmitterID: the UUID of the master module
        :type transmitterID: string
        """
        # https://api.relayr.io/wunderbars/%s
        url = '{0}/wunderbars/{1}'.format(self.host, transmitterID)
        _, data = self.perform_request('DELETE', url, headers=self.headers)
        return data

    def post_users_destroy(self, userID):
        """
        Delete all WunderBars associated with a specific user from the relayr cloud.

        :param userID: the users's UUID
        :type userID: string
        """
        # https://api.relayr.io/users/%s/destroy-everything-i-love
        url = '{0}/users/{1}/destroy-everything-i-love'.format(self.host, userID)
        _, data = self.perform_request('POST', url, headers=self.headers)
        return data

    def get_user_device_models(self, userID):
        """
        Get all device models of a specific user from the relayr cloud.

        :param userID: the users's UUID
        :type userID: string
        """
        # https://api.relayr.io/users/%s/device-models
        url = '{0}/users/{1}/device-models'.format(self.host, userID)
        hdrs = self.headers.copy()
        hdrs['Content-Type'] = 'application/hal+json' # only hal+json allowed
        _, data = self.perform_request('GET', url, headers=hdrs)
        return data

    def get_user_device_model(self, userID, modelID):
        """
        Get a specific device model of a specific user from the relayr cloud.

        :param userID: the users's UUID
        :type userID: string
        :param modelID: the model's UUID
        :type modelID: string
        """
        # https://api.relayr.io/users/%s/device-models/%s
        url = '{0}/users/{1}/device-models/{2}'.format(self.host, userID, modelID)
        hdrs = self.headers.copy()
        hdrs['Content-Type'] = 'application/hal+json' # only hal+json allowed
        _, data = self.perform_request('GET', url, headers=hdrs)
        return data

    def get_user_device_model_component(self, userID, modelID, component):
        pass

    # device groups
    # http://docs.wunderbarregistration.apiary.io/#devicegroups

    def get_user_device_groups(self, userID):
        """
        Get all device groups of a specific user from the relayr cloud.
        """
        # https://api.relayr.io/groups
        url = '{0}/users/{1}/groups'.format(self.host, userID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def delete_user_device_groups(self, userID):
        """
        Delete all device groups of a specific user from the relayr cloud.
        """
        # https://api.relayr.io/groups
        url = '{0}/users/{1}/groups'.format(self.host, userID)
        _, data = self.perform_request('DELETE', url, headers=self.headers)
        return data

    def post_user_device_group(self, name):
        """
        Create one device group with given name for the implied owner in the relayr cloud.
        """
        # https://api.relayr.io/groups
        url = '{0}/groups'.format(self.host)
        data = {"name": name}
        _, data = self.perform_request('POST', url, data=data, headers=self.headers)
        return data

    def get_user_device_group(self, groupID):
        """
        Get one device group with a specific id from the relayr cloud.

        :param groupID: the group's UUID
        :type groupID: string
        """
        # https://api.relayr.io/groups
        url = '{0}/groups/{1}'.format(self.host, groupID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def delete_user_device_group(self, groupID):
        """
        Delete one device group with a specific id from the relayr cloud.

        :param groupID: the group's UUID
        :type groupID: string
        """
        # https://api.relayr.io/groups
        url = '{0}/groups/{1}'.format(self.host, groupID)
        _, data = self.perform_request('DELETE', url, headers=self.headers)
        return data

    def patch_user_device_group(self, groupID, name=None, position=None):
        """
        Patch one device group with a specific id from the relayr cloud.

        :param groupID: the group's UUID
        :type groupID: string
        :param name: the group's new name
        :type name: integer
        :param position: the group's new position
        :type position: integer
        """
        # https://api.relayr.io/groups
        url = '{0}/groups/{1}'.format(self.host, groupID)
        data = {}
        if not name is None:
            data.update(name=name)
        if not position is None:
            data.update(position=position)
        _, data = self.perform_request('PATCH', url, data=data, headers=self.headers)
        return data

    def post_user_device_group_device(self, groupID, deviceIDs=None):
        """
        Add a list of existing device ids to a device group.

        :param groupID: the group's UUID
        :type groupID: string
        :param deviceIDs: devices to be added to the group
        :type deviceIDs: list of UUIDs
        """
        # https://api.relayr.io/groups/<id>
        url = '{0}/groups/{1}'.format(self.host, groupID)
        data = {}
        if not deviceIDs is None:
            data.update(deviceIds=deviceIDs)
        _, data = self.perform_request('POST', url, data=data, headers=self.headers)
        return data

    def delete_user_device_group_device(self, groupID, deviceID):
        """
        Delete a device from a device group.
        """
        # https://api.relayr.io/groups/<id>/devices/<id>
        url = '{0}/groups/{1}/devices/{2}'.format(self.host, groupID, deviceID)
        _, data = self.perform_request('DELETE', url, headers=self.headers)
        return data

    def patch_user_device_group_device(self, groupID, deviceID, position):
        """
        Change a device position inside a device group.
        """
        # https://api.relayr.io/groups/<id>/devices/<id>
        url = '{0}/groups/{1}/devices/{2}'.format(self.host, groupID, deviceID)
        data = {"position": position}
        _, data = self.perform_request('PATCH', url, data=data, headers=self.headers)
        return data

    # ..............................................................................
    # Applications
    # ..............................................................................

    def get_public_apps(self):
        """
        Get a list of all public relayr applications on the relayr platform.

        :rtype: list of dicts, each representing a relayr application
        """
        # https://api.relayr.io/apps
        url = '{0}/apps'.format(self.host)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def post_app(self, appName, publisherID, redirectURI, appDescription):
        """
        Register a new application on the relayr platform.

        :rtype: list of dicts, each representing a relayr application
        """
        data = {
          "name": appName,
          "publisher": publisherID,
          "redirectUri": redirectURI,
          "description": appDescription
        }
        # https://api.relayr.io/apps
        url = '{0}/apps'.format(self.host)
        _, data = self.perform_request('POST', url, data=data, headers=self.headers)
        return data

    def get_app_info(self, appID):
        """
        Get information about an app with a specific UUID.

        :param appID: the app's UUID
        :type appID: string

        Sample result (anonymized token value)::

            {
                "id": "...",
                "name": "My App",
                "description": "My Wunderbar app",
                ...
            }
        """
        # https://api.relayr.io/apps/<appID>
        url = '{0}/apps/{1}'.format(self.host, appID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def get_app_info_extended(self, appID):
        """
        Get extended information about the app with a specific UUID.

        :param appID: the app's UUID
        :type appID: string

        Sample result (some values anonymized)::

            {
                "id": "...",
                "name": "My App",
                "publisher": "...",
                "clientId": "...",
                "clientSecret": "...",
                "description": "My Wunderbar app",
                "redirectUri": https://relayr.io
            }
        """
        # https://api.relayr.io/apps/<appID>/extended
        url = '{0}/apps/{1}/extended'.format(self.host, appID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data


    def patch_app(self, appID, description=None, name=None, redirectUri=None):
        """
        Update one or more attributes of an app with a specific UUID.

        :param appID: the application's UUID
        :type appID: string
        :param description: the user name to be set
        :type description: string
        :param name: the user email to be set
        :type name: string
        :param redirectUri: the redirect URI to be set
        :type redirectUri: string

        Sample result (some values anonymized)::

            {
                "id": "...",
                "name": "My App",
                "publisher": "...",
                "clientId": "...",
                "clientSecret": "...",
                "description": "My Wunderbar app",
                "redirectUri": https://relayr.io
            }
        """
        data = {}
        if name is not None:
            data.update(name=name)
        if description is not None:
            data.update(description=description)
        if redirectUri is not None:
            data.update(redirectUri=redirectUri)

        # https://api.relayr.io/apps/<appID>
        url = '{0}/apps/{1}'.format(self.host, appID)
        _, data = self.perform_request('PATCH', url, data=data, headers=self.headers)
        return data

    def delete_app(self, appID):
        """
        Delete an application from the relayr platform.

        :param appID: the application's UUID
        :type appID: string
        """
        # https://api.relayr.io/apps/<appID>
        url = '{0}/apps/{1}'.format(self.host, appID)
        _, data = self.perform_request('DELETE', url, headers=self.headers)
        return data

    def get_oauth2_app_info(self):
        """
        Get info about the app initiating the request (the one in the token).

        Sample result (anonymized token value)::

            {
                "id": "...",
                "name": "My App",
                "description": "My Wunderbar app"
            }
        """
        # https://api.relayr.io/oauth2/app-info
        url = '{0}/oauth2/app-info'.format(self.host)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data


    # ..............................................................................
    # Publishers
    # ..............................................................................

    def get_public_publishers(self):
        """
        Get a list of all publishers on the relayr platform.

        :rtype: list of dicts, each representing a relayr publisher
        """
        # https://api.relayr.io/publishers
        url = '{0}/publishers'.format(self.host)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def post_publisher(self, userID, name):
        """
        Register a new publisher.

        :param userID: the user UUID of the publisher
        :type userID: string
        :param name: the publisher name
        :type name: string
        :rtype: a dict with fields describing the new publisher
        """
        # https://api.relayr.io/publishers
        data = {'owner': userID, 'name': name}
        url = '{0}/publishers'.format(self.host)
        _, data = self.perform_request('POST', url, data=data, headers=self.headers)
        return data

    def delete_publisher(self, publisherID):
        """
        Delete a specific publisher from the relayr platform.

        :param publisherID: the publisher UUID
        :type publisherID: string
        :rtype: an empty dict(?)
        """
        # https://api.relayr.io/publishers
        url = '{0}/publishers/{1}'.format(self.host, publisherID)
        _, data = self.perform_request('DELETE', url, headers=self.headers)
        return data

    def get_publisher_apps(self, publisherID):
        """
        Return a list of apps published by a specific publisher.

        :param publisherID: the publisher UUID
        :type publisherID: string
        :rtype: A list of apps.
        """
        # https://api.relayr.io/publishers/<id>/apps
        url = '{0}/publishers/{1}/apps'.format(self.host, publisherID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def get_publisher_apps_extended(self, publisherID):
        """
        Return a list with extended information about the publisher's apps.

        :param publisherID: the publisher UUID
        :type publisherID: string
        :rtype: A list of apps.
        """
        # https://api.relayr.io/publishers/<id>/apps/extended
        url = '{0}/publishers/{1}/apps/extended'.format(self.host, publisherID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data


    def patch_publisher(self, publisherID, name=None):
        """
        Update name attribute of a specific publisher.

        :param publisherID: the publisher's UUID
        :type publisherID: string
        :param name: the publisher name to be set
        :type name: string
        :rtype: ``True``, if successful, ``False`` otherwise
        """
        data = {}
        if name is not None:
            data.update(name=name)

        # https://api.relayr.io/publishers/<id>
        url = '{0}/publishers/{1}'.format(self.host, publisherID)
        _, data = self.perform_request('PATCH', url, data=data, headers=self.headers)
        return data

    # ..............................................................................
    # Devices
    # ..............................................................................

    @deprecated(msg='Deprecated method. Please use `get_device_configurations()` instead.')
    def get_device_configuration(self, deviceID):
        """
        Get configuration, default values and schema of a specific device.

        Example result::

            {
                "version": "1.0.0",
                "configuration": {
                    "defaultValues": {
                        "frequency": 1000
                    },
                    "schema": {
                        "required": [
                            "frequency"
                        ],
                        "type": "object",
                        "properties": {
                            "frequency": {
                                "minimum": 5,
                                "type": "integer",
                                "description": "Frequency of the sensor updates in milliseconds"
                            }
                        },
                        "title": "Relayr configuration schema"
                    }
                }
            }

        :param deviceID: the device UUID
        :type deviceID: string
        """
        # https://api.relayr.io/devices/<deviceID>/firmware
        url = '{0}/devices/{1}/firmware'.format(self.host, deviceID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    @deprecated(msg='Deprecated method. Please use `post_device_configurations()` instead.')
    def post_device_configuration(self, deviceID, frequency):
        """
        Modify the configuration of a specific device facillitated by a schema.

        :param deviceID: the device UUID
        :type deviceID: string
        :param frequency: the number of milliseconds between two sensor transmissions
        :type frequency: integer
        """
        data = {'frequency': frequency}
        # https://api.relayr.io/devices/<deviceID>/configuration
        url = '{0}/devices/{1}/configuration'.format(self.host, deviceID)
        _, data = self.perform_request('POST', url, data=data, headers=self.headers)
        return data

    def post_device_configurations(self, deviceID, config=None):
        """
        Modify the configuration of a specific device facillitated by a schema.

        The config must be a dictionary with three keys, path, name and value,
        where path is optional.

        :param deviceID: the device UUID
        :type deviceID: string
        :param config: the configuration to be saved
        :type deviceID: dict
        """
        # https://api.relayr.io/devices/<deviceID>/configurations
        url = '{0}/devices/{1}/configurations'.format(self.host, deviceID)
        _, data = self.perform_request('POST', url, data=config, headers=self.headers)
        return data

    def get_public_devices(self):
        """
        Get list of all public devices on the relayr platform filtered by meaning.

        :param meaning: required meaning in the device model's ``readings`` attribute
        :type meaning: string
        :rtype: list of dicts, each representing a relayr device
        """
        # https://api.relayr.io/devices/public
        url = '{0}/devices/public'.format(self.host)
        _, data = self.perform_request('GET', url)
        return data

    def post_device(self, name, ownerID, modelID, firmwareVersion):
        """
        Register a new device on the relayr platform.

        :param name: the device name
        :type name: string
        :param ownerID: the device owner's UUID
        :type ownerID: string
        :param modelID: the device model's UUID
        :type modelID: string
        :param firmwareVersion: the device's firmware version
        :type firmwareVersion: string
        :rtype: list of dicts, each representing a relayr device
        """
        data = {
            "name": name,
            "owner": ownerID,
            "model": modelID,
            "firmwareVersion": firmwareVersion
        }
        # https://api.relayr.io/devices
        url = '{0}/devices'.format(self.host)
        _, data = self.perform_request('POST', url, data=data, headers=self.headers)
        return data


    def post_device_wb2(self, name, ownerID, modelID, firmwareVersion, mac, transmitterId):
        """
        Register a new device on the relayr platform.

        :param name: the device name
        :type name: string
        :param ownerID: the device owner's UUID
        :type ownerID: string
        :param modelID: the device model's UUID
        :type modelID: string
        :param firmwareVersion: the device's firmware version
        :type firmwareVersion: string
        :rtype: list of dicts, each representing a relayr device
        """
        data = {
            "name": name,
            "owner": ownerID,
            "model": modelID,
            "firmwareVersion": firmwareVersion,
            "integrationType": "wunderbar2",
            "mac": mac,
            "transmitterId": transmitterId
        }
        # https://api.relayr.io/devices
        url = '{0}/devices'.format(self.host)
        _, data = self.perform_request('POST', url, data=data, headers=self.headers)
        return data


    def get_device(self, deviceID):
        """
        Get information about a specific device.

        :param deviceID: the device UUID
        :type deviceID: string
        :rtype: a dict with fields containing information about the device

        Raises ``exceptions.RelayrApiException`` for invalid UUIDs or missing
        credentials.
        """
        # https://api.relayr.io/devices/%s
        url = '{0}/devices/{1}'.format(self.host, deviceID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def patch_device(self, deviceID, name=None, description=None, modelID=None, public=None):
        """
        Update one or more attributes of a specific device.

        :param deviceID: the device UUID
        :type deviceID: string
        :param name: the device name
        :type name: string
        :param description: the device description
        :type description: string
        :param modelID: the device model UUID
        :type modelID: string
        :param public: the device state (public or not)
        :type public: boolean
        :rtype: a dict with fields containing information about the device

        Raises ``exceptions.RelayrApiException`` for invalid UUIDs or missing
        credentials.
        """
        data = {
            "name": name,
            "description": description,
            "model": modelID,
            "public": public
        }
        # filter data (compatible with Python 2.6)
        data1 = {}
        for k, v in data.items():
            if v != None:
                data1[k] = v
        data = data1
        # https://api.relayr.io/devices/%s
        url = '{0}/devices/{1}'.format(self.host, deviceID)
        _, data = self.perform_request('PATCH', url, data=data, headers=self.headers)
        return data

    def delete_device(self, deviceID):
        """
        Delete a specific device from the relayr platform.

        :param deviceID: the device UUID
        :type deviceID: string
        :rtype: a dict with fields containing information about the device
        """
        # https://api.relayr.io/devices/%s
        url = '{0}/devices/{1}'.format(self.host, deviceID)
        _, data = self.perform_request('DELETE', url, headers=self.headers)
        return data

    def post_channel(self, deviceID, transport):
        """
        Create a new channel to let the current user receive device data.

        The return value is a channel UUID plus credentials to connect to it.

        :param deviceID: the device UUID
        :type deviceID: string
        :param transport: transport for channel (mqtt, websockets, etc.)
        :type transport: string
        :rtype: dict with channel credentials to connect to the device

        Example result (for transport='mqtt')::

            {
                'channelId': u'62e2ceb8-a63f-11e4-8792-6c400890724a',
                'credentials': {
                    'password': '012345678901',
                    'topic': '/v1/62e2ceb8-a63f-11e4-8792-6c400890724a',
                    'user': '62e2ceb8-a63f-11e4-8792-6c400890724a'
                }
            }
        """
        url = '{0}/channels'.format(self.host)
        data = {'deviceId': deviceID, 'transport': transport}
        _, res = self.perform_request('POST', url,
                                      data=data, headers=self.headers)
        return res

    def delete_channel_id(self, channelID):
        """
        Delete an existing specific channel.

        :param channelID: the UUID of the channel
        :type channelID: string
        :rtype: None

        Raises ``exceptions.RelayrApiException`` for non-existing channelID.
        """
        url = '{0}/channels/{1}'.format(self.host, channelID)
        _, res = self.perform_request('DELETE', url, headers=self.headers)
        return res

    def delete_channels_device_transport(self, deviceID=None, transport=None):
        """
        Delete all existing channels for the given device ID and/or transport.

        :param deviceID: the device UUID
        :type deviceID: string
        :param transport: transport for channel (mqtt, websockets, etc.)
        :type transport: string
        :rtype: list of deleted channelIDs
        """
        url = '{0}/channels'.format(self.host)
        data = {}
        if deviceID is not None:
            data['deviceId'] = deviceID
        if transport is not None:
            data['transport'] = transport
        _, res = self.perform_request('DELETE', url,
                                      data=data, headers=self.headers)
        return res

    def get_device_channels(self, deviceID):
        """
        Get all existing channels for a specific device.

        :param deviceID: the device UUID
        :type deviceID: string
        :rtype: dict with a list of attributes for each existing channel

        Example output::

            {
              'deviceId': '...',
              'channels': [
                {
                  'channelId': '...',
                  'transport': 'mqtt',
                  'appId': '...'
                },
                {
                  'channelId': '...',
                  'transport': 'mqtt',
                  'appId': '...'
                }
              ]
            }
        """
        url = '{0}/devices/{1}/channels'.format(self.host, deviceID)
        _, res = self.perform_request('GET', url, headers=self.headers)
        return res

    @deprecated(msg='Deprecated method. Please use `post_device_commands()` instead.')
    def post_device_command_led(self, deviceID, data):
        """
        Send a command to a specific device's LED.

        :param deviceID: the device's UUID
        :type deviceID: string
        :param data: the data to be sent, here {'cmd': true/false}
        :type data: dict
        :rtype: dict with connection credentials
        """
        # https://api.relayr.io/devices/<deviceID>/cmd/led
        url = '{0}/devices/{1}/cmd/led'.format(self.host, deviceID)
        _, data = self.perform_request('POST', url, data=data, headers=self.headers)
        return data

    @deprecated(msg='Deprecated method. Please use `post_device_commands()` instead.')
    def post_device_command(self, deviceID, command):
        """
        Send a command to a specific device.

        :param deviceID: the device's UUID
        :type deviceID: string
        :param command: the command to be sent
        :type command: dict
        :rtype: dict with connection credentials
        """
        # https://api.relayr.io/devices/<deviceID>/cmd
        url = '{0}/devices/{1}/cmd'.format(self.host, deviceID)
        _, data = self.perform_request('POST', url, data=command, headers=self.headers)
        return data

    def post_device_commands(self, deviceID, command=None):
        """
        Send a command to a specific device.

        The command must be a dictionary with three keys, path, name and value,
        where path is optional.

        :param deviceID: the device's UUID
        :type deviceID: string
        :param command: the command to be sent
        :type command: dict
        :rtype: dict with connection credentials
        """
        # https://api.relayr.io/devices/<deviceID>/commands
        url = '{0}/devices/{1}/commands'.format(self.host, deviceID)
        _, data = self.perform_request('POST', url, data=command, headers=self.headers)
        return data

    def post_device_data(self, deviceID, data):
        """
        Send JSON formatted data to a device (eg. temperature readings).

        :param deviceID: the device's UUID
        :type deviceID: string
        :param data: the command data
        :type data: anything serializable as JSON
        :rtype: string
        """
        # https://api.relayr.io/devices/<device_id>/data
        url = '{0}/devices/{1}/data'.format(self.host, deviceID)
        _, data = self.perform_request('POST', url, data=data, headers=self.headers)
        return data

    # Device state endpoints

    def get_device_reading(self, deviceID, path=None, meaning=None):
        """
        This endpoint returns only the reading part. Path and meaning are optional.
        If a path is not provided only readings with empty paths are returned.
        If meaning is not provided all the matched readings with {path} are returned.

        :param deviceID: the device UUID
        :type deviceID: string
        :param path: the reading's path
        :type path: string
        :param meaning: the reading's meaning
        :type meaning: string
        :rtype: a dict with desired readings as specified.

        Example::

            {
                "version": {
                    "number": 100,
                    "ts": 1452525615741
                },
                "readings": [
                    {
                        "path": "fridge",
                        "meaning": "temperature",
                        "ts": 1452525615741,
                        "value": 1000
                    }
                ]
            }
        """

        # https://api.relayr.io/devices/<deviceID>/readings?path=<path>&meaning=<meaning>
        url = '{0}/devices/{1}/readings'.format(self.host, deviceID)
        locs = locals().copy()
        params = {k: locs.get(k, None) for k in ('path', 'meaning')}
        params = {k:v for (k, v) in params.items() if v is not None}
        if params:
            url += ('?%s' % urlencode(params))
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def get_device_metadata(self, deviceID, key=None):
        """
        Get the device metadata with given key.

        The key is a multi-level string like this "my.custom.metadata" where
        each dot identifies a deeper level in the hierarchy. Wrong keys result
        in an empty JSON.

        :param deviceID: the device UUID
        :type deviceID: string
        :param key: the reading's key
        :type key: string
        :rtype: a dict with desired key as specified.

        Example::

            {
                "version": {
                    "number": 100,
                    "ts": 1452525615741
                },
                "metadata": {
                    "my": {
                        "custom": {
                            "metadata": 100
                        }
                    }
                }
            }
        """

        # https://api.relayr.io/devices/<deviceID>/metadata?key=<key>
        url = '{0}/devices/{1}/metadata'.format(self.host, deviceID)
        if key:
            url += ('?key=%s' % key)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def get_device_commands(self, deviceID, path=None, name=None):
        """
        Get the device commands with given path and name.

        Same as `get_devices_readings()`, only with a different key.
        Name is used instead of meaning.

        :param deviceID: the device UUID
        :type deviceID: string
        :param path: the reading's path
        :type path: string
        :param name: the reading's name
        :type name: string
        :rtype: a dict with desired readings as specified.

        Example::

            {
                "commands": [
                    {
                        "path": "door",
                        "name": "led",
                        "value": 1000,
                        "ts": 1452525615741
                    }
                ],
                "version": {
                    "number": 100,
                    "ts": 1452525615741
                }
            }
        """

        # https://api.relayr.io/devices/<deviceID>/commands?path=<path>&name=<name>
        url = '{0}/devices/{1}/commands'.format(self.host, deviceID)
        locs = locals().copy()
        params = {k: locs.get(k, None) for k in ('path', 'name')}
        params = {k:v for (k, v) in params.items() if v is not None}
        if params:
            url += ('?%s' % urlencode(params))
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def get_device_state(self, deviceID):
        """
        Get the whole saved state of a specific device.

        This includes readings, commands, configurations, and metadata,
        as well as simple version numbers for these items.

        :param deviceID: the device UUID
        :type deviceID: string
        :rtype: a dict with entire device state.

        Example::

            ?
        """

        # https://api.relayr.io/devices/<deviceID>/state
        url = '{0}/devices/{1}/state'.format(self.host, deviceID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def get_device_configurations(self, deviceID, path=None, name=None):
        """
        Get the device configurations with given path and name.

        :param deviceID: the device UUID
        :type deviceID: string
        :param path: the configuration's path
        :type path: string
        :param name: the configuration's name
        :type name: string
        :rtype: a dict with desired configuration as specified.

        Example:
            {
                "commands": [
                    {
                        "path": "door",
                        "name": "led",
                        "value": 1000,
                        "ts": 1452525615741
                    }
                ],
                "version": {
                    "number": 100,
                    "ts": 1452525615741
                }
            }
        """

        # https://api.relayr.io/devices/<deviceID>/configurations?path=<path>&name=<name>
        url = '{0}/devices/{1}/configurations'.format(self.host, deviceID)
        locs = locals().copy()
        params = {k: locs.get(k, None) for k in ('path', 'name')}
        params = {k:v for (k, v) in params.items() if v is not None}
        if params:
            url += ('?%s' % urlencode(params))
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def post_device_metadata(self, deviceID, key=None, data=None):
        """
        Save some metadata for the specified device.

        The key is used as prefix. Note that is not possible to send a value
        (instead of a JSON object) without a key, but a (key, value) pair is
        fine. So no json=1 and key=EMPTY, but this works: json=1 key=meta. (???)

        :param deviceID: the device UUID
        :type deviceID: string
        :param key: the metadata key
        :type key: string
        :param data: the actual metadata data
        :type data: a JSON-serializable object
        :rtype: None
        """
        # https://api.relayr.io/devices/<deviceID>/metadata?key=<key> POST {"some": {"meta": 1}}
        url = '{0}/devices/{1}/metadata'.format(self.host, deviceID)
        if key:
            url += ('?key=%s' % key)
        _, data = self.perform_request('POST', url, data=data, headers=self.headers)
        return data

    def get_device_credentials(self, deviceID):
        """
        Get credentials for a specific device.

        :param deviceID: the device UUID
        :type deviceID: string
        :rtype: dict with credentials info
        """
        # https://api.relayr.io/devices/<deviceID>/credentials
        url = '{0}/devices/{1}/credentials'.format(self.host, deviceID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def post_device_credentials(self, deviceID, data):
        """
        Post credentials for a specific device.

        :param deviceID: the device UUID
        :type deviceID: string
        :param data: the credentials
        :type data: dict
        :rtype: string
        """
        # https://api.relayr.io/devices/<deviceID>/credentials
        url = '{0}/devices/{1}/credentials'.format(self.host, deviceID)
        _, data = self.perform_request('POST', url, data=data, headers=self.headers)
        return data

    # "History API"

    def get_history_devices(self, deviceID, start=None, end=None, sample=None,
                            meaning=None, path=None, offset=None, limit=None):
        """
        Return past data for a specific device after a given starting point.

        :param deviceID: the device UUID
        :type deviceID: string
        :param start: unix datetime in ms
        :type start: long
        :param end: unit datetime in ms
        :type end: long
        :param meaning: meaning filter
        :type meaning: string
        :param path: path filter
        :type path: string
        :param offset: pagination offset
        :type offset: integer
        :param limit: limit for returned values
        :type limit: integer
        :rtype: history response with pagination info
        """
        # https://data.relayr.io/history/devices/<deviceID>?start=<..>
        base_url = '{0}/history/devices/{1}'.format(self.history_host, deviceID)

        params = {'start': start}
        for p in 'end meaning path offset limit'.split():
            params[p] = locals()[p]
        params = {k:v for (k, v) in params.items() if v is not None}

        url = base_url + '?%s' % urlencode(params)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data


    # ..............................................................................
    # Device models
    # ..............................................................................

    def get_public_device_models(self, headers={'Content-Type': 'application/json'}):
        """
        Get list of all device models available on the relayr platform.

        :param headers: additional HTTP headers (default: ``{'Content-Type': 'application/json'}``)
        :type headers: dict
        :rtype: list or dict, depening on the ``Content-Type`` field in headers
        """
        # https://api.relayr.io/device-models
        url = '{0}/device-models'.format(self.host)
        _, data = self.perform_request('GET', url, headers=headers)
        return data

    def get_device_model(self, devicemodelID):
        """
        Get information about a specific device model.

        :param devicemodelID: the device model's UUID
        :type devicemodelID: string
        :rtype: A nested dictionary structure with fields describing the DM.
        """
        # https://api.relayr.io/device-models/<id>
        url = '{0}/device-models/{1}'.format(self.host, devicemodelID)
        hdrs = self.headers.copy()
        hdrs['Content-Type'] = 'application/hal+json'
        _, data = self.perform_request('GET', url, headers=hdrs)
        return data

    def get_public_device_model_meanings(self):
        """
        Get list of all device model meanings (no credentials needed).

        :rtype: list of dicts, each representing a relayr device model meaning
        """
        # https://api.relayr.io/device-models/meanings
        url = '{0}/device-models/meanings'.format(self.host)
        _, data = self.perform_request('GET', url)
        return data

    # ..............................................................................
    # Transmitters
    # ..............................................................................

    def get_transmitter(self, transmitterID):
        """
        Get information about a transmitter with a specific UUID.

        :param transmitterID: the transmitter UUID
        :type transmitterID: string
        :rtype: a dict with fields describing the transmitter
        """
        # https://api.relayr.io/transmitters/<id>
        url = '{0}/transmitters/{1}'.format(self.host, transmitterID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def post_transmitter(self, ownerID=None, name=None, integrationType=None):
        """
        Register a new transmitter on the relayr platform.

        :param ownerID: the transmitter owner's UUID
        :type ownerID: string
        :param name: the transmitter name
        :type name: string
        :param integrationType: the transmitter integration type
        :type integrationType: string
        :rtype: an empty dict(?)
        """
        data = {}
        if ownerID is not None:
            data.update(owner=ownerID)
        if name is not None:
            data.update(name=name)
        if integrationType is not None:
            data.update(integrationType=integrationType)

        # https://api.relayr.io/transmitters/<id>
        url = '{0}/transmitters/'.format(self.host)
        _, data = self.perform_request('POST', url, data=data, headers=self.headers)
        return data

    def patch_transmitter(self, transmitterID, name=None):
        """
        Update the name attribute of a specific transmitter.

        :param transmitterID: the transmitter UUID
        :type transmitterID: string
        :param name: the transmitter name
        :type name: string
        :rtype: an empty dict(?)
        """
        data = {}
        if name is not None:
            data.update(name=name)

        # https://api.relayr.io/transmitters/<id>
        url = '{0}/transmitters/{1}'.format(self.host, transmitterID)
        _, data = self.perform_request('PATCH', url, data=data, headers=self.headers)
        return data

    def delete_transmitter(self, transmitterID):
        """
        Delete a specific transmitter from the relayr platform.

        :param transmitterID: the transmitter UUID
        :type transmitterID: string
        :rtype: an empty dict(?)
        """
        # https://api.relayr.io/transmitters/<id>
        url = '{0}/transmitters/{1}'.format(self.host, transmitterID)
        _, data = self.perform_request('DELETE', url, headers=self.headers)
        return data

    def post_transmitter_device(self, transmitterID, deviceID):
        """
        Connect a specific transmitter to a specific device.

        :param transmitterID: the transmitter UUID
        :type transmitterID: string
        :param deviceID: the device UUID
        :type deviceID: string
        :rtype: an empty dict(?)
        """
        # https://api.relayr.io/transmitters/<transmitterID>/devices/<deviceID>
        url = '{0}/transmitters/{1}/devices/{2}'.format(self.host, transmitterID, deviceID)
        _, data = self.perform_request('POST', url, headers=self.headers)
        return data

    def get_transmitter_devices(self, transmitterID):
        """
        Get a list of devices connected to a specific transmitter.

        :param transmitterID: the transmitter UUID
        :type transmitterID: string
        :rtype: a list of devices
        """
        # https://api.relayr.io/transmitters/<transmitterID>/devices
        url = '{0}/transmitters/{1}/devices'.format(self.host, transmitterID)
        _, data = self.perform_request('GET', url, headers=self.headers)
        return data

    def delete_transmitter_device(self, transmitterID, deviceID):
        """
        Disconnect a specific transmitter from a specific device.

        :param transmitterID: the transmitter UUID
        :type transmitterID: string
        :param deviceID: the device UUID
        :type deviceID: string
        :rtype: an empty dict(?)
        """
        # https://api.relayr.io/transmitters/<transmitterID>/devices/<deviceID>
        url = '{0}/transmitters/{1}/devices/{2}'.format(self.host, transmitterID, deviceID)
        _, data = self.perform_request('DELETE', url, headers=self.headers)
        return data
