"""
A collection of decorators.
"""

import warnings
from functools import wraps


# http://brianholdefehr.com/decorators-and-functional-python

def deprecated(function=None, msg=None):
    """
    A decorator to be used for marking functions and methods as deprecated.

    It will result in a `DeprecationWarning` being emmitted when the function
    or method is used, with an optional message text which can be used to
    indicate appropriate action, e.g. explaining which replacement function
    or method to use instead.

    The message, if present, will be appended as a seperate paragraph to the
    to the decorated function's or method's docstring, following the text
    'This is deprecated. '.
    """

    def actual_decorator(function):
        @wraps(function)
        def returned_func(*args, **kwargs):
            warnings.simplefilter('always', DeprecationWarning) # turn off filter 
            text = 'Call to deprecated function {}().'.format(function.__name__)
            if msg:
                text += (' ' + msg)
            warnings.warn(text, category=DeprecationWarning, stacklevel=2)
            warnings.simplefilter('default', DeprecationWarning) # reset filter
            return function(*args, **kwargs)

        rf = returned_func
        rf.__name__ = function.__name__
        rf.__doc__ = function.__doc__
        if msg:
            if not rf.__doc__:
                rf.__doc__ = ''
            if rf.__doc__:
                rf.__doc__ += '\n\n'
            rf.__doc__ += msg
        rf.__dict__.update(function.__dict__)
        return rf

    if not function: # user passed in a msg keyword argument
        def waiting_for_func(function):
            return actual_decorator(function)
        return waiting_for_func
    else:
        return actual_decorator(function)


# test
if __name__ == '__main__':
    @deprecated
    def old1(x, y):
        "Some old function1."
        return x + y

    @deprecated(msg='Better use new_func()!')
    def old2(x, y):
        "Some old function2."
        return x + y

    @deprecated(msg='Better use new_func()!')
    def old3(x, y):
        return x + y

    old1(1, 2)
    old2(3, 4)
    old2(5, 6)
